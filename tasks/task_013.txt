# Task ID: 13
# Title: Integrate Message Bus Architecture into Backtesting System
# Status: done
# Dependencies: 2, 3, 4
# Priority: high
# Description: Implement a MessageBus class to enable decoupled, event-driven communication between backtesting components, updating strategies and OrderManager to use event publishing and handling.
# Details:
1. Design and implement a MessageBus class that supports event publishing, subscription, and message dispatching between components (e.g., strategies, OrderManager, position tracker). Use a type-safe, in-memory approach in TypeScript, allowing handlers to register for specific event types (such as order submissions, fills, cancellations, and position updates).
2. Refactor existing strategies and the OrderManager to publish events to the MessageBus instead of making direct method calls. For example, when a strategy submits an order, it should publish an 'OrderSubmitted' event, and the OrderManager should subscribe to handle such events.
3. Implement event handler registration and dispatch logic, ensuring that all relevant components can react to published events asynchronously and in the correct order.
4. Create event types and payload interfaces for all key actions (order submission, fill, cancellation, position update, etc.), ensuring strong typing and extensibility.
5. Ensure backward compatibility by maintaining legacy direct method call paths during the transition, with clear deprecation warnings and documentation.
6. Update documentation to describe the new event-driven architecture and migration steps for existing components.
7. Provide code examples and migration guides for strategy and OrderManager integration with the MessageBus.

# Test Strategy:
- Write unit tests for the MessageBus class covering event publishing, subscription, and handler invocation for all supported event types.
- Create integration tests simulating end-to-end backtest runs, verifying that strategies and OrderManager interact solely via the MessageBus and that all events are correctly handled.
- Test backward compatibility by running legacy strategies and OrderManager logic in parallel with the new event-driven approach, ensuring no regressions.
- Validate that event handlers are invoked in the correct order and that no events are lost or duplicated.
- Review and test documentation and migration guides for clarity and completeness.

# Subtasks:
## 1. Implement Type-Safe In-Memory MessageBus Class [done]
### Dependencies: None
### Description: Design and implement a MessageBus class in TypeScript that supports type-safe event publishing, subscription, and message dispatching between components.
### Details:
Create a MessageBus class that allows components to register handlers for specific event types, publish events, and dispatch messages in-memory. Ensure strong typing for event payloads and handler signatures. Support asynchronous event handling and maintain a registry of subscribers for each event type.

## 2. Update OrderManager to Publish Events via MessageBus [done]
### Dependencies: 13.1
### Description: Refactor the OrderManager to publish events (such as order submissions, fills, and cancellations) to the MessageBus instead of making direct method calls.
### Details:
Identify all points in the OrderManager where events occur. Replace direct calls to other components with MessageBus.publish() calls, using the appropriate event types and payloads. Ensure the OrderManager subscribes to relevant events if it needs to react to them.

## 3. Refactor Strategies to Use Event Publishing and Subscription [done]
### Dependencies: 13.1
### Description: Update strategy components to publish events (e.g., order requests) and subscribe to relevant events (e.g., fills, position updates) via the MessageBus.
### Details:
Replace direct interactions between strategies and other components with event-based communication through the MessageBus. Ensure strategies publish events for actions they initiate and register handlers for events they need to react to.

## 4. Implement and Register Event Handlers for Core Actions [done]
### Dependencies: 13.1, 13.2, 13.3
### Description: Create event handler functions for all key actions (order submission, fill, cancellation, position update) and register them with the MessageBus.
### Details:
Define event types and payload interfaces for each core action. Implement handler functions that process these events and update system state as needed. Register handlers with the MessageBus to ensure correct event flow.

## 5. Migrate UI Components to Subscribe to MessageBus Events [done]
### Dependencies: 13.1, 13.4
### Description: Update UI components to subscribe to relevant MessageBus events for real-time updates, replacing any direct polling or method calls.
### Details:
Identify UI components that require updates based on system events (e.g., order status, position changes). Refactor them to subscribe to the MessageBus and update their state in response to relevant events.
<info added on 2025-06-09T03:45:14.723Z>
Completed implementation of BacktestEngineAdapter that bridges BacktesterPage with the new MessageBus/Cache architecture. The adapter encapsulates MessageBus, Cache, and EventHandlers, providing processBar() and getState() methods for seamless integration with the existing strategy interface and UI. It manages event subscriptions, state change notifications, and ensures signals and orders are stored in cache when events are published. Cache data is converted to the UI-expected format (including trade markers and indicators). A comprehensive test suite with 7 passing tests validates the adapter, enabling gradual migration of UI components to the new event-driven architecture without disrupting current functionality.
</info added on 2025-06-09T03:45:14.723Z>

## 6. Test and Validate MessageBus Integration Across the System [done]
### Dependencies: 13.2, 13.3, 13.4, 13.5
### Description: Conduct integration testing to ensure all components interact correctly via the MessageBus, and legacy paths are maintained with deprecation warnings.
### Details:
Perform end-to-end tests covering typical backtesting workflows. Ensure both event-driven and legacy direct-call paths function correctly. Add deprecation warnings and update documentation to guide migration.
<info added on 2025-06-09T03:49:25.365Z>
Integration testing for the MessageBus architecture has been completed. A new test file, MessageBus.Integration.test.ts, was created with 10 comprehensive tests covering end-to-end event flows (order lifecycle, position lifecycle, strategy signals), event handler order and consistency, error isolation between handlers, backward compatibility with direct method calls, performance (1000+ events without loss), message history limits, concurrent event publishing, and full backtest workflow using only events. Integration issues were resolved, including updates to BacktestEngineAdapter for ORDER_FILLED events, addition of handlers for POSITION_OPENED and POSITION_CLOSED events, creation of an event interception mechanism to forward OrderManager events from singleton to adapter instance, and ensuring cache updates on event publishing. All tests are passing, confirming the MessageBus architecture functions correctly across the system.
</info added on 2025-06-09T03:49:25.365Z>

