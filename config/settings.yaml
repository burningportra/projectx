# Configuration for ProjectX Trading System

# API and Authentication Details
# These should ideally be overridden by environment variables for security in production
api:
  base_url: "https://api.topstepx.com" # As per docs
  login_url: "/api/Auth/loginKey" # As per docs
  market_hub_url_base: "wss://rtc.topstepx.com/hubs/market"
  user_hub_url_base: "wss://rtc.topstepx.com/hubs/user"
  # API_KEY_ENV_VAR and USERNAME_FOR_TOKEN_GENERATION will be read from .env
  # PROJECTX_API_TOKEN: "your_api_token_from_env" 
  # USERNAME_FOR_TOKEN_GENERATION: "your_username_from_env"

# Database Configuration
database:
  use_timescale: true # Added to enable TimescaleDB by default via settings
  default_ingestion_db: local_timescaledb # Can be 'local_timescaledb' or 'railway_timescaledb'
  local_timescaledb:
    host: "localhost"
    port: 5433 # Default from your run_timescaledb_docker.sh
    user: "postgres" # Default for many postgres images
    password_env_var: "LOCAL_DB_PASSWORD" # Specifies the ENV VAR for the password
    dbname: "projectx" # Default from your run_timescaledb_docker.sh
    # Template for constructing the DSN if individual parts are used
    dsn_template: "postgresql://{user}:{password}@{host}:{port}/{dbname}"
  railway_timescaledb:
    # RAILWAY_DATABASE_URL_ENV_VAR: "DATABASE_URL" # To be read from .env for Railway deployment

# Trading Parameters
trading:
  contracts:
    - id: "CON.F.US.MES.M25" # Example: Micro E-mini S&P 500 June 2025
    # - id: "CON.F.US.MNQ.M25" # Example: Micro E-mini Nasdaq 100 June 2025
  
  # Timeframes for OHLC aggregation and analysis (e.g., 1m, 5m, 15m, 1h, 4h)
  # Format: <number><unit_char> (m: minute, h: hour, d: day)
  timeframes:
    - "1m"
    - "5m"
    - "15m"
    - "30m"
    - "1h"
    - "4h"
    - "6h"
    - "12h"
    - "1d"
    - "1w"
    - "1mo"

  # Parameters for trend_analyzer_alt.py, potentially on a per-timeframe basis
  # This is a placeholder, structure will depend on how trend_analyzer_alt.py is refactored
  analyzer_params:
    default:
      lookback_period: 20 # Example parameter
      # Add other parameters your trend_analyzer_alt might use
    "1m":
      lookback_period: 10
    "1h":
      lookback_period: 25

# Logging Configuration for dictConfig
logging:
  version: 1
  disable_existing_loggers: false
  formatters:
    simple:
      format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    detailed:
      format: "%(asctime)s - %(name)s - %(levelname)s - %(module)s - L%(lineno)d - %(message)s"
  handlers:
    console:
      class: logging.StreamHandler
      level: DEBUG # Console can be more verbose for development
      formatter: simple
      stream: ext://sys.stdout
    # Example file handler (can be added for specific services or globally)
    # info_file_handler:
    #   class: logging.handlers.RotatingFileHandler
    #   level: INFO
    #   formatter: detailed
    #   filename: logs/projectx_info.log
    #   maxBytes: 10485760 # 10MB
    #   backupCount: 20
    #   encoding: utf8
  root:
    level: INFO # Default level for all loggers unless overridden
    handlers: [console] # Add other handlers like info_file_handler here if desired globally
  # Example of configuring specific loggers for more fine-grained control:
  # loggers:
  #   src.data.ingestion.live_ingester:
  #     level: DEBUG
  #     handlers: [console, info_file_handler] # Can use multiple handlers
  #     propagate: no # Prevent messages from also going to root logger handlers
  #   src.analysis.analyzer_service:
  #     level: INFO
  #   asyncpg:
  #     level: WARNING # To quiet down noisy library logs

# Data Ingestion Service
data_ingestion:
  websocket_reconnect_delay_base: 5 # seconds
  websocket_reconnect_max_attempts: 10 

# Contract Configuration
contracts:
  default_monitor_list:
    - "CON.F.US.MES.M25"
    # - "CON.F.US.MNQ.M25"
  # Specific contract settings can be added here if needed later

# Ingestion Service Configuration
ingestion:
  default_timeframe_seconds: 60 # Default if no specific list provided, or for single-timeframe mode
  target_timeframes_seconds:
    - 60    # 1 minute
    - 300   # 5 minutes
    - 900   # 15 minutes
  main_loop_sleep_seconds: 300 # How often the main loop checks token/connection status
  # Potential future settings:
  # historical_fill_days: 7
  # data_source_priority: ['trades', 'quotes'] # if using both for OHLC

# Analysis Service Configuration
analysis:
  loop_sleep_seconds: 300 # Time in seconds the analyzer service sleeps between cycles
  targets:
    - analyzer_id: "cus_cds_trend_finder"
      contract_id: "CON.F.US.MES.M25"
      # List all timeframes this analyzer should process for this contract
      timeframes: ["1m", "5m", "15m", "30m", "1h", "4h", "6h", "12h", "1d", "1w", "1mo"]
      # Example of another target for a different contract or analyzer:
      # - analyzer_id: "another_strategy_analyzer"
  #   - analyzer_id: "trend_start_finder_v1"
  #     contract_id: "CON.F.US.EUR.M25"
  #     timeframes: ["1h", "4h"]

# List of contracts to subscribe to for live data
# Initially, we'll work with one, but this could be a list later.
live_contracts:
  - contract_id: "CON.F.US.MES.M25" # Example Micro E-mini S&P 500
    # Timeframes in seconds to aggregate for this contract
    timeframes_seconds:
      - 60    # 1 minute
      - 300   # 5 minutes
      - 900   # 15 minutes 

# --- Signal Coordination Service Configuration ---
coordination:
  coordinator_id: "simple_confluence_coordinator_v1"
  loop_interval_seconds: 60 # How often to check for new signals
  db_fetch_limit: 1000 # Max signals to fetch from DB in one go
  rules:
    - name: "MES_1h_15m_Confluence_CUS_CDS"
      description: "Looks for a CUS on 1h confirmed by a CDS on 15m for MES contract."
      primary_signal:
        contract_id: "CON.F.US.MES.M25" # Can be specific or use a wildcard like "*" for any contract
        timeframe: "1h"
        # signal_type: "CUS_CONFIRMED_UP" # or "CDS_CONFIRMED_DOWN", or a list, or wildcard "*"
        signal_types: ["CUS_CONFIRMED_UP", "CUS_CONFIRMED_DOWN"]
      confirming_signals:
        - contract_id: "CON.F.US.MES.M25" # Must match primary or be compatible
          timeframe: "15m"
          # signal_type: "CDS_CONFIRMED_DOWN"
          signal_types: ["CDS_CONFIRMED_UP", "CDS_CONFIRMED_DOWN"]
          time_offset_minutes: 5 # Confirming signal must be within +/- 5 minutes of primary
          # required_match: "opposite" # e.g. primary CUS_UP needs confirming CDS_DOWN. Or "same" or "any"

# --- (Future) Execution Service Configuration ---
execution:
  execution_service_id: "default_executor_001"
  loop_interval_seconds: 10
  db_fetch_limit: 100 # Max coordinated signals or orders to process per loop
  provider: "mock" # "mock", "tradovate", "interactive_brokers", etc.
  default_account_id: "mock_account_001" # Default account to use if not specified elsewhere

  # Risk management parameters applied by the OrderManager
  risk_parameters:
    default_max_contracts_per_trade: 1
    # Symbol-specific overrides for max contracts
    contract_max_contracts:
      "CON.F.US.MES.M25": 1
      # "CON.F.US.MNQ.M25": 2

    # Default stop loss and take profit. Can be specified in ticks, points, or percentage.
    # These are fallback values if not defined by the strategy signal itself.
    default_stop_loss:
      type: "ticks" # "ticks", "points", "percentage"
      value: 20 # e.g., 20 ticks for MES (0.25 points per tick = 5 points)
    default_take_profit:
      type: "ticks"
      value: 40 # e.g., 40 ticks for MES (10 points)

    # Contract-specific stop/profit levels
    contract_specific_risk:
      "CON.F.US.MES.M25":
        stop_loss:
          type: "points"
          value: 6
        take_profit:
          type: "points"
          value: 12
      # "CON.F.US.CL.Q25": # Crude Oil
      #   stop_loss:
      #     type: "ticks"
      #     value: 15 # 0.01 per tick
      #   take_profit:
      #     type: "ticks"
      #     value: 45

  # Configuration for the mock execution client (if provider is "mock")
  mock_client_config:
    fill_chance_percentage: 80 # 80% chance an order will be filled
    simulated_fill_delay_ms: 100 # Simulate a delay before fill confirmation
    slippage_ticks: 1 # Simulate 1 tick of slippage on fills for market orders

# The following logging section was a duplicate and has been removed.
# # --- Logging Configuration ---
# logging:
# # ... existing code ... 