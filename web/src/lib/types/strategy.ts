import { 
  BacktestBarData, 
  SubBarData, 
  StrategySignal, 
  SimulatedTrade, 
  Order, 
  StrategyConfig,
  UTCTimestamp,
  BacktestResults 
} from './backtester';

/**
 * Result type returned by the processBar method of a strategy
 */
export interface StrategyResult {
  /** Primary signal generated by the strategy (if any) */
  signal: StrategySignal | null;
  /** Current indicator values for display/analysis */
  indicators: Record<string, number | Record<string, number>>;
  /** Orders that were filled during this bar processing */
  filledOrders: Order[];
}

/**
 * Unified interface that all trading strategies must implement.
 * This ensures consistency across different strategy implementations
 * and provides a standard contract for the strategy engine.
 */
export interface IStrategy {
  /**
   * Reset the strategy state to initial conditions
   * Clears all internal state including indicators, signals, trades, etc.
   */
  reset(): void;

  /**
   * Process a single bar and generate trading signals/actions
   * @param mainBar - The main timeframe bar data
   * @param subBars - Optional sub-timeframe bars for this main bar
   * @param barIndex - Index of the current bar in the series
   * @param allMainBars - All main timeframe bars available so far
   * @returns Strategy result with signals, indicators, and filled orders
   */
  processBar(
    mainBar: BacktestBarData, 
    subBars: SubBarData[] | undefined, 
    barIndex: number, 
    allMainBars: BacktestBarData[]
  ): Promise<StrategyResult> | StrategyResult;

  /**
   * Get all completed trades from the strategy
   * @returns Array of all closed trades
   */
  getTrades(): SimulatedTrade[];

  /**
   * Get the currently open trade (if any)
   * @returns Open trade or null if no position is open
   */
  getOpenTrade(): SimulatedTrade | null;

  /**
   * Get all signals generated by the strategy
   * @returns Array of all strategy signals
   */
  getSignals(): StrategySignal[];

  /**
   * Get current indicator values for display
   * @returns Object with indicator names as keys and current values
   */
  getCurrentIndicators(): Record<string, number | Record<string, number>> | null;

  /**
   * Get all pending (unfilled) orders
   * @param contractId - Optional contract ID to filter orders
   * @returns Array of pending orders
   */
  getPendingOrders(contractId?: string): Order[];

  /**
   * Get all filled orders
   * @param contractId - Optional contract ID to filter orders
   * @returns Array of completed orders
   */
  getFilledOrders(contractId?: string): Order[];

  /**
   * Get all cancelled orders
   * @param contractId - Optional contract ID to filter orders
   * @returns Array of cancelled orders
   */
  getCancelledOrders(contractId?: string): Order[];

  /**
   * Update strategy configuration with partial config object
   * @param config - Partial configuration to merge with current config
   */
  updateConfig(config: Partial<StrategyConfig>): void;

  /**
   * Get current strategy configuration
   * @returns Complete strategy configuration object
   */
  getConfig(): StrategyConfig;

  /**
   * Get the name of the strategy
   * @returns Strategy name
   */
  getName(): string;

  /**
   * Get the description of the strategy
   * @returns Strategy description
   */
  getDescription(): string;

  /**
   * Get the version of the strategy
   * @returns Strategy version string
   */
  getVersion(): string;

  /**
   * Run a complete backtest on historical data
   * @param mainBars - Array of main timeframe bars
   * @param subBars - Optional array of sub-timeframe bars
   * @returns Backtest results with performance metrics
   */
  backtest?(mainBars: BacktestBarData[], subBars?: SubBarData[]): BacktestResults;
}

/**
 * Base configuration interface that all strategies extend
 */
export interface BaseStrategyConfig extends StrategyConfig {
  /** Strategy name */
  name: string;
  /** Strategy description */
  description: string;
  /** Strategy version */
  version: string;
}

/**
 * Type for strategy constructor function
 */
export type StrategyConstructor<T extends IStrategy = IStrategy> = new (
  config?: Partial<BaseStrategyConfig>
) => T;

/**
 * Strategy metadata for registration and discovery
 */
export interface StrategyMetadata {
  /** Unique identifier for the strategy */
  id: string;
  /** Display name */
  name: string;
  /** Brief description */
  description: string;
  /** Strategy version */
  version: string;
  /** Strategy author */
  author?: string;
  /** Required parameters and their types */
  parameters: Record<string, {
    type: 'number' | 'string' | 'boolean';
    default: any;
    description: string;
    min?: number;
    max?: number;
    options?: any[];
  }>;
  /** Strategy complexity score (1-10) */
  complexity?: number;
}
