import { UTCTimestamp } from 'lightweight-charts';

// Interface for OHLCV bar data, compatible with Lightweight Charts and our Python Bar class
export interface BacktestBarData {
  time: UTCTimestamp; // Epoch time in seconds
  open: number;
  high: number;
  low: number;
  close: number;
  volume?: number; // Optional, as in Python Bar class
  originalIndex?: number; // Optional: to map back to original data if needed
}

// Interface for sub-timeframe data used to build main bars
export interface SubBarData extends BacktestBarData {
  parentBarIndex: number; // Index of the main timeframe bar this sub-bar belongs to
}

// Enum for strategy signals based on trend_models.py (can be expanded)
export enum StrategySignalType {
  // Trend analysis signals
  PENDING_UPTREND_START = 'PUS',
  PENDING_DOWNTREND_START = 'PDS',
  CONFIRMED_UPTREND_START = 'CUS',
  CONFIRMED_DOWNTREND_START = 'CDS',
  FORCED_CDS = 'FORCED_CDS',
  FORCED_CUS = 'FORCED_CUS',
  
  // Simple trading signals (for EMA and other basic strategies)
  BUY = 'BUY',
  SELL = 'SELL',
  HOLD = 'HOLD',
}

// Interface for a signal generated by the strategy
export interface StrategySignal {
  barIndex: number; // Index of the bar that generated the signal
  time: UTCTimestamp;
  type: StrategySignalType;
  price?: number; // Price at which signal occurred (e.g., low for PUS, high for PDS)
  message?: string; // Optional description from strategy logic
}

// Enum for trade types
export enum TradeType {
  BUY = 'BUY',
  SELL = 'SELL',
}

// Interface for a simulated trade
export interface SimulatedTrade {
  id: string; // Unique ID for the trade
  entryTime: UTCTimestamp;
  entryPrice: number;
  exitTime?: UTCTimestamp;
  exitPrice?: number;
  type: TradeType;
  size: number;
  profitOrLoss?: number;
  commission?: number;
  status?: 'OPEN' | 'CLOSED';
  signalEntry?: StrategySignal; // Signal that triggered entry
  signalExit?: StrategySignal;  // Signal that triggered exit (if applicable)
}

// Interface for the overall backtest results
export interface BacktestResults {
  totalProfitOrLoss: number;
  winRate: number; // Percentage (0-100)
  totalTrades: number;
  maxDrawdown: number;
  profitFactor: number;
  sharpeRatio?: number; // Optional, more advanced metric
  trades: SimulatedTrade[];
  // Add any other summary statistics needed
}

// Enum for playback speeds
export enum PlaybackSpeed {
  NORMAL = 1000,     // 1x speed - 1 second per bar
  FAST_2X = 500,     // 2x speed - 0.5 seconds per bar
  FAST_4X = 250,     // 4x speed - 0.25 seconds per bar
  FAST_8X = 125,     // 8x speed - 0.125 seconds per bar
  FAST_16X = 62,     // 16x speed - ~0.06 seconds per bar
  VERY_FAST_32X = 31, // 32x speed - ~0.03 seconds per bar
  INSANE_64X = 15,   // 64x speed - ~0.015 seconds per bar (ULTRA FAST!)
}

// Enum for bar formation modes
export enum BarFormationMode {
  INSTANT = 'INSTANT',        // Show complete bars instantly (current behavior)
  PROGRESSIVE = 'PROGRESSIVE', // Show bars forming using sub-timeframe data
}

// Interface for playback state
export interface PlaybackState {
  currentBarIndex: number; // 0-based index of current main timeframe bar
  currentSubBarIndex: number; // 0-based index of current sub-bar within the current main bar
  isPlaying: boolean;      // Whether auto-playback is active
  speed: PlaybackSpeed;    // Current playback speed
  totalBars: number;       // Total number of main timeframe bars
  barFormationMode: BarFormationMode; // How bars should be displayed
}

// Represents the state of the backtesting engine itself (not the strategy state)
export interface BacktestEngineState {
  mainTimeframeBars: BacktestBarData[];    // Main timeframe bars (e.g., 1h)
  subTimeframeBars: SubBarData[];          // Sub-timeframe bars (e.g., 1m) 
  playback: PlaybackState;
  // Strategy-specific state would be managed by the translated Python State class
}

// Helper type for timeframe relationships
export interface TimeframeConfig {
  main: string;        // e.g., '1h'
  sub: string;         // e.g., '1m' or '5m'
  subBarsPerMain: number; // How many sub-bars make up one main bar (e.g., 60 for 1h/1m)
} 