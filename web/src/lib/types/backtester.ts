import { UTCTimestamp } from 'lightweight-charts';

// Re-export UTCTimestamp for use in other modules
export type { UTCTimestamp };

// Interface for OHLCV bar data, compatible with Lightweight Charts and our Python Bar class
export interface BacktestBarData {
  time: UTCTimestamp; // Epoch time in seconds
  open: number;
  high: number;
  low: number;
  close: number;
  volume?: number; // Optional, as in Python Bar class
  originalIndex?: number; // Optional: to map back to original data if needed
}

// Interface for sub-timeframe data used to build main bars
export interface SubBarData extends BacktestBarData {
  parentBarIndex: number; // Index of the main timeframe bar this sub-bar belongs to
}

// Enum for strategy signals based on trend_models.py (can be expanded)
export enum StrategySignalType {
  // Trend analysis signals
  PENDING_UPTREND_START = 'PUS',
  PENDING_DOWNTREND_START = 'PDS',
  CONFIRMED_UPTREND_START = 'CUS',
  CONFIRMED_DOWNTREND_START = 'CDS',
  FORCED_CDS = 'FORCED_CDS',
  FORCED_CUS = 'FORCED_CUS',
  
  // Simple trading signals (for EMA and other basic strategies)
  BUY = 'BUY',
  SELL = 'SELL',
  HOLD = 'HOLD',
}

// Interface for a signal generated by the strategy
export interface StrategySignal {
  barIndex: number; // Index of the bar that generated the signal
  time: UTCTimestamp;
  type: StrategySignalType;
  price?: number; // Price at which signal occurred (e.g., low for PUS, high for PDS)
  message?: string; // Optional description from strategy logic
}

// Enum for trade types
export enum TradeType {
  BUY = 'BUY',
  SELL = 'SELL',
}

// NEW: Enum for order types
export enum OrderType {
  MARKET = 'MARKET',           // Execute immediately at market price
  LIMIT = 'LIMIT',             // Execute only at specified price or better
  STOP = 'STOP',               // Execute when price reaches stop level (becomes market order)
  STOP_LIMIT = 'STOP_LIMIT',   // Execute when price reaches stop level (becomes limit order)
}

// NEW: Enum for order status
export enum OrderStatus {
  PENDING = 'PENDING',         // Order submitted but not filled
  PARTIALLY_FILLED = 'PARTIALLY_FILLED', // Order partially executed
  FILLED = 'FILLED',           // Order completely executed
  CANCELLED = 'CANCELLED',     // Order cancelled
  REJECTED = 'REJECTED',       // Order rejected
  EXPIRED = 'EXPIRED',         // Order expired
}

// NEW: Enum for order side
export enum OrderSide {
  BUY = 'BUY',
  SELL = 'SELL',
}

// NEW: Interface for an order
export interface Order {
  id: string;                  // Unique order ID
  type: OrderType;             // Order type (MARKET, LIMIT, etc.)
  side: OrderSide;             // BUY or SELL
  quantity: number;            // Number of contracts/shares
  price?: number;              // Limit price (for LIMIT orders)
  stopPrice?: number;          // Stop price (for STOP orders)
  status: OrderStatus;         // Current order status
  submittedTime: UTCTimestamp; // When order was submitted
  filledTime?: UTCTimestamp;   // When order was filled (if applicable)
  filledPrice?: number;        // Price at which order was filled
  filledQuantity?: number;     // Quantity filled (for partial fills)
  commission?: number;         // Commission charged
  message?: string;            // Status message or reason for rejection
  parentTradeId?: string;      // Associated trade ID
  isStopLoss?: boolean;        // True if this is a stop loss order
  isTakeProfit?: boolean;      // True if this is a take profit order
  isEntry?: boolean;           // True if this order opens a new position
  isExit?: boolean;            // True if this order closes an existing position
  positionId?: string;         // ID of position to close (for exit orders)
  tradeId?: string;           // Can be used by OrderManager to group related orders (e.g., entry, SL, TP for one trade)
  contractId?: string;         // The contract this order is for
}

// NEW: Interface for position with stop loss and take profit
export interface Position {
  id: string;                  // Unique position ID
  entryTime: UTCTimestamp;     // When position was opened
  entryPrice: number;          // Average entry price
  side: OrderSide;             // LONG (BUY) or SHORT (SELL)
  quantity: number;            // Position size
  unrealizedPnL?: number;      // Current unrealized P&L
  stopLossOrder?: Order;       // Associated stop loss order
  takeProfitOrder?: Order;     // Associated take profit order
  entryOrders: Order[];        // Orders that created this position
  status: 'OPEN' | 'CLOSED';   // Position status
}

// ENHANCED: Interface for a simulated trade with order support
export interface SimulatedTrade {
  id: string; // Unique ID for the trade
  entryTime: UTCTimestamp;
  entryPrice: number;
  exitTime?: UTCTimestamp;
  exitPrice?: number;
  type: TradeType;
  size: number;
  profitOrLoss?: number;
  commission?: number;
  status?: 'OPEN' | 'CLOSED' | 'PENDING';
  signalEntry?: StrategySignal; // Signal that triggered entry
  signalExit?: StrategySignal;  // Signal that triggered exit (if applicable)
  
  // NEW: Order management fields
  entryOrder?: Order;          // Order that opened the trade
  exitOrder?: Order;           // Order that closed the trade
  stopLossOrder?: Order;       // Active stop loss order
  takeProfitOrder?: Order;     // Active take profit order
  exitReason?: 'SIGNAL' | 'STOP_LOSS' | 'TAKE_PROFIT' | 'MANUAL' | 'REVERSAL_EXIT'; // Why trade was closed
}

// NEW: Interface for strategy configuration with risk management
export interface StrategyConfig {
  // Risk management
  stopLossPercent?: number;     // Stop loss as percentage (e.g., 2.0 for 2%)
  stopLossTicks?: number;       // Stop loss in ticks
  takeProfitPercent?: number;   // Take profit as percentage
  takeProfitTicks?: number;     // Take profit in ticks
  commission: number;           // Commission per trade
  positionSize: number;         // Default position size
  
  // Order preferences
  useMarketOrders?: boolean;    // Use market orders vs limit orders
  limitOrderOffset?: number;    // Offset for limit orders (ticks)
  orderTimeoutBars?: number;    // Cancel limit orders after N bars
  
  // Strategy-specific parameters (can be extended by individual strategies)
  [key: string]: any;
}

// NEW: Interface for order management state
export interface OrderManagerState {
  pendingOrders: Order[];       // Orders waiting to be filled
  filledOrders: Order[];        // Completed orders
  cancelledOrders: Order[];     // Cancelled orders
  orderIdCounter: number;       // For generating unique order IDs
}

// Interface for the overall backtest results
export interface BacktestResults {
  totalProfitOrLoss: number;
  winRate: number; // Percentage (0-100)
  totalTrades: number;
  maxDrawdown: number;
  profitFactor: number;
  sharpeRatio?: number; // Optional, more advanced metric
  trades: SimulatedTrade[];
  
  // Enhanced metrics for better analysis
  averageWin?: number;           // Average winning trade amount
  averageLoss?: number;          // Average losing trade amount
  averageTrade?: number;         // Average trade P&L
  maxConsecutiveWins?: number;   // Maximum consecutive winning trades
  maxConsecutiveLosses?: number; // Maximum consecutive losing trades
  averageTradeDuration?: number; // Average trade duration in minutes
  returnOnMaxDrawdown?: number;  // Total return divided by max drawdown
  winningTrades?: number;        // Number of winning trades
  losingTrades?: number;         // Number of losing trades
  largestWin?: number;           // Largest winning trade
  largestLoss?: number;          // Largest losing trade (negative value)
  expectancy?: number;           // Mathematical expectancy per trade
  kellyPercentage?: number;      // Kelly criterion optimal bet size
}

// Enum for playback speeds
export enum PlaybackSpeed {
  NORMAL = 1000,     // 1x speed - 1 second per bar
  FAST_2X = 500,     // 2x speed - 0.5 seconds per bar
  FAST_4X = 250,     // 4x speed - 0.25 seconds per bar
  FAST_8X = 125,     // 8x speed - 0.125 seconds per bar
  FAST_16X = 62,     // 16x speed - ~0.06 seconds per bar
  VERY_FAST_32X = 31, // 32x speed - ~0.03 seconds per bar
  INSANE_64X = 15,   // 64x speed - ~0.015 seconds per bar (ULTRA FAST!)
}

// Enum for bar formation modes
export enum BarFormationMode {
  INSTANT = 'INSTANT',        // Show complete bars instantly (current behavior)
  PROGRESSIVE = 'PROGRESSIVE', // Show bars forming using sub-timeframe data
}

// Interface for playback state
export interface PlaybackState {
  currentBarIndex: number; // 0-based index of current main timeframe bar
  currentSubBarIndex: number; // 0-based index of current sub-bar within the current main bar
  isPlaying: boolean;      // Whether auto-playback is active
  speed: PlaybackSpeed;    // Current playback speed
  totalBars: number;       // Total number of main timeframe bars
  barFormationMode: BarFormationMode; // How bars should be displayed
}

// Represents the state of the backtesting engine itself (not the strategy state)
export interface BacktestEngineState {
  mainTimeframeBars: BacktestBarData[];    // Main timeframe bars (e.g., 1h)
  subTimeframeBars: SubBarData[];          // Sub-timeframe bars (e.g., 1m) 
  playback: PlaybackState;
  // Strategy-specific state would be managed by the translated Python State class
}

// Helper type for timeframe relationships
export interface TimeframeConfig {
  main: string;        // e.g., '1h'
  sub: string;         // e.g., '1m' or '5m'
  subBarsPerMain: number; // How many sub-bars make up one main bar (e.g., 60 for 1h/1m)
}
