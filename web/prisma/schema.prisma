generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OhlcBar {
  contractId     String   @map("contract_id")
  timestamp      DateTime @db.Timestamptz(6)
  open           Float
  high           Float
  low            Float
  close          Float
  volume         BigInt?
  timeframeUnit  Int      @map("timeframe_unit")
  timeframeValue Int      @map("timeframe_value")

  @@id([contractId, timestamp, timeframeUnit, timeframeValue])
  @@index([contractId], map: "idx_bars_contract")
  @@index([timeframeUnit, timeframeValue], map: "idx_bars_timeframe")
  @@map("ohlc_bars")
}

model TrendPoint {
  id         Int      @id @default(autoincrement())
  contractId String   @map("contract_id")
  timestamp  DateTime @db.Timestamptz(6)
  price      Float
  type       String
  timeframe  String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([contractId, timestamp, type])
  @@index([contractId, timeframe])
  @@map("trend_points")
}

model AnalyzerWatermark {
  analyzerId             String   @map("analyzer_id")
  contractId             String   @map("contract_id")
  timeframe              String
  lastProcessedTimestamp DateTime? @map("last_processed_timestamp") @db.Timestamptz(6)

  @@id([analyzerId, contractId, timeframe])
  @@map("analyzer_watermarks")
}

model CoordinatorWatermark {
  coordinatorId          String  @id @map("coordinator_id")
  lastProcessedSignalId BigInt? @map("last_processed_signal_id")

  @@map("coordinator_watermarks")
}

model DetectedSignal {
  signal_id         Int      @id @default(autoincrement())
  analyzer_id       String
  timestamp         DateTime @db.Timestamptz // Timestamp of the bar generating the signal
  trigger_timestamp DateTime @default(now()) @db.Timestamptz // When this row was inserted
  contract_id       String
  timeframe         String   // e.g., "1m", "5m", "1h". Consistent with Python insert.
  signal_type       String   // Was rule_type in some DDLs, but signal_type in Python INSERT and API params
  signal_price      Float?
  signal_open       Float?
  signal_high       Float?
  signal_low        Float?
  signal_close      Float?
  signal_volume     Float?
  details           Json?    @db.JsonB

  @@unique([analyzer_id, contract_id, timeframe, timestamp, signal_type], name: "detected_signals_unique_idx")
  @@index([contract_id, timeframe, timestamp])
  @@index([signal_type])
  @@index([timestamp])
  @@map("detected_signals")
} 